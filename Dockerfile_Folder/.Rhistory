knitr::opts_chunk$set(echo = TRUE)
#Load data
suppressPackageStartupMessages({
library(SingleCellExperiment)
library(scater)
library(tidyverse)
library(ggplot2)
library(gridExtra)
library(grid)
library(edgeR)
library(irlba)
library(muscat)
library(countsimQC)
library(TMB)
library(cowplot)
library(scDblFinder)
library(dplyr)
library(UpSetR)
library(uwot)
library(Rtsne)
library(countsimQC)
})
source('./Preprocessing_fun.R', echo=FALSE)
set.seed(123)
#Load object
sce = readRDS("week13_SCE_clustered.rds")
sce = prep_steps(sce)
#Load simulation functions
#library(sta426) #load our simulation package remotes::install_github("adrianom2017/sta426-project/sta426")
source('./fun.R', echo=FALSE) #TODO remove this and use package
sce_prep <- prepSCE(sce,
cluster_id = "cluster_id",
sample_id = "sample_id",
group_id = "group_id",
drop = FALSE)
sce_prep <- prepSim(sce_prep)
counts(sce_prep) = as.matrix(counts(sce_prep))
sce_prep = logNormCounts(sce_prep)
#saveRDS(sce_prep, file = "sce_prep.RDS")
n_cluster = length(unique(colData(sce_prep)$cluster_id))
freq_cluster = table(colData(sce_prep)$cluster_id)
freq_cluster = freq_cluster / sum(freq_cluster)
n_sample = length(unique(colData(sce_prep)$sample_id))
n_group = 2
#Set params MUSCAT
n_genes = nrow(sce_prep)
n_cells_muscat = 100*n_sample
p_dd = c(0.9, 0, 0.1, 0, 0, 0)
probs = list(cluster = freq_cluster,
sample = rep(1/n_sample, n_sample),
group = rep(1/n_group, n_group))
lfc = 4
#Set params our simulation
n_comp = 10
n_cells = rep(n_cells_muscat / n_sample, n_sample)
kNN = 10
kNN_subsample = 5
#logFC = list(magnitude = lfc, proportion = p_dd[3]) #corresponds to p_dd
verbose = 0
#Run muscat simulations
sce_muscat = simData(sce_prep, n_genes = n_genes, n_cells = n_cells_muscat, p_dd = p_dd, probs = probs, lfc = lfc)
#Extract meta data
meta = metadata(sce_muscat)$gene_info %>% select(cluster_id, logFC, sim_gene)
meta$logFC[is.na(meta$logFC)] = 0
#Set up sce to replicate muscat simulation
gene_id = meta %>% filter(cluster_id == "Neuronal_excit") %>% select(sim_gene)
idx = sapply(gene_id$sim_gene, function(x){
which(x == rownames(sce_prep))
})
#hist(table(idx))
sce_prep2 = sce_prep[idx,]
logFC = list("muscat_data" = meta)
library_size_muscat = colSums(counts(sce_muscat))
#Run simulation
sce_sim = create_dataset(sce_prep2, n_comp, n_cells, kNN, kNN_subsample, n_sample, logFC, probs, library_size_muscat,verbose)
#Convert counts
sce_muscat = logNormCounts(sce_muscat)
logcounts(sce_prep) = as.matrix(logcounts(sce_prep))
counts(sce_prep) = as.matrix(counts(sce_prep))
#Populate sce_sim with reducedDim
sce_sim = runPCA(sce_sim)
sce_sim = runUMAP(sce_sim)
sce_sim = runTSNE(sce_sim)
#Populate sce_muscat with reducedDim
sce_muscat = runPCA(sce_muscat)
sce_muscat = runUMAP(sce_muscat)
sce_muscat = runTSNE(sce_muscat)
#Populate sce_wt with reducedDim
sce_prep = runPCA(sce_prep)
sce_prep = runUMAP(sce_prep)
sce_prep = runTSNE(sce_prep)
#Run countsimQCReport
DESeq_sim = DESeq2::DESeqDataSetFromMatrix(counts(sce_sim), colData(sce_sim), ~cluster_id*group_id)
DESeq_muscat = DESeq2::DESeqDataSetFromMatrix(counts(sce_muscat), colData(sce_muscat), ~cluster_id*group_id)
DESeq_prep = DESeq2::DESeqDataSetFromMatrix(counts(sce_prep), colData(sce_prep), ~cluster_id)
QCdata = list("Original" = DESeq_prep, "sce_muscat" = DESeq_muscat, "sce_sim" = DESeq_sim)
# countsimQCReport(ddsList = QCdata, outputFile = "countsim_report.html",
#                  outputDir = "./CountSimReport", outputFormat = "html_document",
#                  showCode = FALSE, forceOverwrite = TRUE,
#                  savePlots = TRUE, description = "This is my test report.",
#                  maxNForCorr = 25, maxNForDisp = Inf,
#                  calculateStatistics = TRUE, subsampleSize = 25,
#                  kfrac = 0.01, kmin = 5,
#                  permutationPvalues = FALSE, nPermutations = NULL)
source('./Muscat_Simulation_Fun.R', echo=FALSE)
Simulation_DS_analysis<-function(sce,pos,sim_type,methods){
upset_plot_cluster = list()
TPR.vs.FDR_plot = list()
labels =  c('A', 'B','C','D')
num = 0
for (method in methods){
num = num +1
method_pieces <- strsplit(method, "_")
method_substring <- matrix(unlist(method_pieces), ncol=3, byrow=TRUE)
if (pos!=3 && pos!=4){
print("Invalid gene_info argument position")
break
}
topnumber = 0
vst = NULL
ds <- list()
if (grepl("mm_",method)){
if (method_substring[2] == "dream"){
topnumber = 8
}
else if (method_substring[2] == "vst"){
topnumber = 8
vst = method_substring[3]
}
ds <- DS.analysis.mm(sce,method_substring[2],method_substring[1],vst,topnumber,pos)
#Visualization
plots <- DS.analysis.Visualization.mm(ds,method_substring[2],method_substring[1],vst,topnumber,num,sim_type)
}
else{
if (!(method_substring[1] == "logcounts" && method_substring[3] == "edgeR")){
topnumber = 8
}
#DS pb analysis
ds <- DS.analysis.pd(sce,method_substring[2],method_substring[1],method_substring[3], topnumber,pos)
#Visualization
plots <- DS.analysis.Visualization.pb(ds,method_substring[2],method_substring[1],method_substring[3],topnumber,num,sim_type)
}
if (!is_null(plots$TPR.vs.FDR)){
TPR.vs.FDR_plot[[num]] <- plots$TPR.vs.FDR
}
if (!is_null(plots$upset)){
upset_plot_cluster[[num]] <- plots$upset
}
}
#Upset plot
upset_list <- list(upsetPlot = upset_plot_cluster[1])
for (v in names(upset_list)) {
print(upset_list[[v]])
grid.text(v, x = 0.65, y=0.97, gp = gpar(fontsize = 20))
grid.edit('arrange',name = v)
vp <- grid.grab()
upset_list[[v]] <- vp
}
upset_plot = grid.arrange(grobs = upset_list, ncol = 2)
save_plot(paste0("Upset_plot_",sim_type,".png"), upset_plot, ncol = 2)
# TPR.vs.FDR plot
TPR.vs.FDR = plot_grid(plotlist=TPR.vs.FDR_plot[1:2],labels = labels[1:2], label_size = 12)
save_plot(paste0("TPR.vs.FDR_1_",sim_type,".png"), TPR.vs.FDR, ncol = 2)
TPR.vs.FDR = plot_grid(plotlist=TPR.vs.FDR_plot[3:4],labels = labels[3:4], label_size = 12)
save_plot(paste0("TPR.vs.FDR_2_",sim_type,".png"), TPR.vs.FDR, ncol = 2)
}
methods <- list("sum_counts_edgeR","sum_counts_limma-voom","mean_logcounts_edgeR",
"mean_logcounts_limma-voom")
###  Muscat Simulation
Simulation_DS_analysis(sce_muscat,3,"muscat",methods)
### Correlation Structure Simulation
Simulation_DS_analysis(sce_sim,4,"correlation_structure",methods)
res_muscat = readRDS("output/muscat/DS_results_counts_sum_edgeR.rds")
res_sim = readRDS("output/correlation_structure/DS_results_counts_sum_edgeR.rds")
#Obtain all idx for the genes in DE analysis
#Not all genes in the sce_muscat and sce_sim are in the results of the DE analysis object due to filtering.
idx_sim_ne = sapply(res_sim$table$B$Neuronal_excit$gene, function(x){
which(x == rownames(sce_sim))
})
idx_sim_ni = sapply(res_sim$table$B$Neuronal_inhib$gene, function(x){
which(x == rownames(sce_sim))
})
idx_mu_ne = sapply(res_muscat$table$B$Neuronal_excit$gene, function(x){
which(x == rownames(sce_muscat))
})
idx_mu_ni = sapply(res_muscat$table$B$Neuronal_inhib$gene, function(x){
which(x == rownames(sce_muscat))
})
#Construct vectors indicating logFC for the genes in the analysis
mm = metadata(sce_muscat)
ms = metadata(sce_sim)
lfc_mm_ne = mm$gene_info %>% filter(cluster_id == "Neuronal_excit") %>% select(logFC)
lfc_mm_ne = lfc_mm_ne$logFC
lfc_mm_ne[is.na(lfc_mm_ne)] = 0
lfc_mm_ne = lfc_mm_ne[idx_mu_ne]
lfc_mm_ni = mm$gene_info %>% filter(cluster_id == "Neuronal_inhib") %>% select(logFC)
lfc_mm_ni = lfc_mm_ni$logFC
lfc_mm_ni[is.na(lfc_mm_ni)] = 0
lfc_mm_ni = lfc_mm_ni[idx_mu_ni]
lfc_ms_ne = ms$gene_info2 %>% filter(cluster_id == "Neuronal_excit") %>% select(logFC)
lfc_ms_ne = lfc_ms_ne$logFC
lfc_ms_ne = lfc_ms_ne[idx_sim_ne]
lfc_ms_ni = ms$gene_info2 %>% filter(cluster_id == "Neuronal_inhib") %>% select(logFC)
lfc_ms_ni = lfc_ms_ni$logFC
lfc_ms_ni = lfc_ms_ni[idx_sim_ni]
lfc_res_mm_ne = res_muscat$table$B$Neuronal_excit$logFC
lfc_res_mm_ni = res_muscat$table$B$Neuronal_inhib$logFC
lfc_res_ms_ne = res_sim$table$B$Neuronal_excit$logFC
lfc_res_ms_ni = res_sim$table$B$Neuronal_inhib$logFC
## Prep data for upset plots
#Construct vectors of p.adj for the genes in the analysis
mm = metadata(sce_muscat)
ms = metadata(sce_sim)
DE_mm_ne = mm$gene_info %>% filter(cluster_id == "Neuronal_excit") %>% select(logFC)
DE_mm_ne = DE_mm_ne$logFC
DE_mm_ne[is.na(DE_mm_ne)] = 0
DE_mm_ne = DE_mm_ne[idx_mu_ne]
DE_mm_ne[DE_mm_ne != 0] = 1 #set all DE genes to 1
DE_mm_ni = mm$gene_info %>% filter(cluster_id == "Neuronal_inhib") %>% select(logFC)
DE_mm_ni = DE_mm_ni$logFC
DE_mm_ni[is.na(DE_mm_ni)] = 0
DE_mm_ni = DE_mm_ni[idx_mu_ni]
DE_mm_ni[DE_mm_ni != 0] = 1 #set all DE genes to 1
DE_ms_ne = ms$gene_info2 %>% filter(cluster_id == "Neuronal_excit") %>% select(logFC)
DE_ms_ne = DE_ms_ne$logFC
DE_ms_ne = DE_ms_ne[idx_sim_ne]
DE_ms_ne[DE_ms_ne != 0] = 1
DE_ms_ni = ms$gene_info2 %>% filter(cluster_id == "Neuronal_inhib") %>% select(logFC)
DE_ms_ni = DE_ms_ni$logFC
DE_ms_ni = DE_ms_ni[idx_sim_ni]
DE_ms_ni[DE_ms_ni != 0] = 1
DE_res_mm_ne = rep(0, nrow(res_muscat$table$B$Neuronal_excit))
DE_res_mm_ne[res_muscat$table$B$Neuronal_excit$p_adj.loc <= 0.05] = 1
DE_res_mm_ni = rep(0, nrow(res_muscat$table$B$Neuronal_inhib))
DE_res_mm_ni[res_muscat$table$B$Neuronal_inhib$p_adj.loc <= 0.05] = 1
DE_res_ms_ne = rep(0, nrow(res_sim$table$B$Neuronal_excit))
DE_res_ms_ne[res_sim$table$B$Neuronal_excit$p_adj.loc <= 0.05] = 1
DE_res_ms_ni = rep(0, nrow(res_sim$table$B$Neuronal_inhib))
DE_res_ms_ni[res_sim$table$B$Neuronal_inhib$p_adj.loc <= 0.05] = 1
#Upset true vs predicted
upset_data_mm_ne = data.frame(True = DE_mm_ne, Predicted = DE_res_mm_ne)
upset_data_mm_ni = data.frame(True = DE_mm_ni, Predicted = DE_res_mm_ni)
upset_data_ms_ne = data.frame(True = DE_ms_ne, Predicted = DE_res_ms_ne)
upset_data_ms_ni = data.frame(True = DE_ms_ni, Predicted = DE_res_ms_ni)
#Compute ranking of genes, Neuronal_excit
##Find genes in both analysis results
sim_ = res_sim$table$B$Neuronal_excit
muscat_ = res_muscat$table$B$Neuronal_excit
intersect_genes = intersect(sim_$gene, muscat_$gene)
muscat_ = muscat_[muscat_$gene %in% intersect_genes,]
sim_ = sim_[sim_$gene %in% intersect_genes,]
##Comput order
sim_order_e = order(sim_$p_adj.loc)
muscat_order_e = sapply(sim_$gene[sim_order_e], function(x){
which(x == muscat_$gene)})
#Compute ranking of genes, Neuronal_inhib
sim_ = res_sim$table$B$Neuronal_inhib
muscat_ = res_muscat$table$B$Neuronal_inhib
intersect_genes = intersect(sim_$gene, muscat_$gene)
muscat_ = muscat_[muscat_$gene %in% intersect_genes,]
sim_ = sim_[sim_$gene %in% intersect_genes,]
##Comput order
sim_order_i = order(sim_$p_adj.loc)
muscat_order_i = unlist(sapply(sim_$gene[sim_order_i], function(x){
which(x == muscat_$gene)}))
par(mfrow = c(2,2))
plot(lfc_mm_ni, lfc_res_mm_ni, xlab = "", ylab = "")
title(main = "Neuronal_inhib sce_muscat", xlab = "True logFC", ylab = "DE analysis logFC")
plot(lfc_mm_ne, lfc_res_mm_ne, xlab = "", ylab = "")
title(main = "Neuronal_excit sce_musact", xlab = "True logFC", ylab = "DE analysis logFC")
plot(lfc_ms_ni, lfc_res_ms_ni, xlab = "", ylab = "")
title(main = "Neuronal_inhib sce_sim", xlab = "True logFC", ylab = "DE analysis logFC")
plot(lfc_ms_ne, lfc_res_ms_ne, xlab = "", ylab = "")
title(main = "Neuronal_excit sce_sim", xlab = "True logFC", ylab = "DE analysis logFC")
#Plot dim reductions
par(mfrow=c(3,1))
g1 = plotReducedDim(sce_prep, "PCA", colour_by = "cluster_id") + ggtitle("sce_prep")
g2 = plotReducedDim(sce_muscat, "PCA", colour_by = "cluster_id", shape_by = "group_id") + ggtitle("sce_muscat")
g3 = plotReducedDim(sce_sim, "PCA", colour_by = "cluster_id", shape_by = "group_id")  + ggtitle("sce_sim")
grid.arrange(g1,g2,g3, nrow = 1, ncol = 3)
par(mfrow=c(3,1))
g1 = plotReducedDim(sce_prep, "UMAP", colour_by = "cluster_id")+ ggtitle("sce_prep")
g2 = plotReducedDim(sce_muscat, "UMAP", colour_by = "cluster_id", shape_by = "group_id") + ggtitle("sce_muscat")
g3 = plotReducedDim(sce_sim, "UMAP", colour_by = "cluster_id", shape_by = "group_id") + ggtitle("sce_sim")
grid.arrange(g1,g2,g3, nrow = 1, ncol = 3)
par(mfrow=c(3,1))
g1 = plotReducedDim(sce_prep, "TSNE", colour_by = "cluster_id")+ ggtitle("sce_prep")
g2 = plotReducedDim(sce_muscat, "TSNE", colour_by = "cluster_id", shape_by = "group_id") + ggtitle("sce_muscat")
g3 = plotReducedDim(sce_sim, "TSNE", colour_by = "cluster_id", shape_by = "group_id") + ggtitle("sce_sim")
grid.arrange(g1,g2,g3, nrow = 1, ncol = 3)
#True vs predicted
g1 = upset(upset_data_mm_ne, empty.intersections = TRUE)
g2 = upset(upset_data_mm_ni, empty.intersections = TRUE)
g3 = upset(upset_data_ms_ne, empty.intersections = TRUE)
g4 = upset(upset_data_ms_ni, empty.intersections = TRUE)
print(g1)
print(g2)
print(g3)
print(g4)
sim_order_e
sim_$gene[sim_order_e]
head(sim)
head(sim_)
head(sim_[sim_order_i,])
head(sim_$gene[sim_order_i,])
head(sim_$gene[sim_order_i])
sim_$gene[sim_order_i]
#Compute ranking of genes, Neuronal_excit
##Find genes in both analysis results
sim_ = res_sim$table$B$Neuronal_excit
muscat_ = res_muscat$table$B$Neuronal_excit
intersect_genes = intersect(sim_$gene, muscat_$gene)
muscat_ = muscat_[muscat_$gene %in% intersect_genes,]
sim_ = sim_[sim_$gene %in% intersect_genes,]
##Comput order
sim_order_e = order(sim_$p_adj.loc)
muscat_order_e = order(sim_$p_adj.loc)
muscat_order_e = sapply(sim_$gene[sim_order_e], function(x){
which(x == muscat_$gene[muscat_order_e])})
#Compute ranking of genes, Neuronal_inhib
sim_ = res_sim$table$B$Neuronal_inhib
muscat_ = res_muscat$table$B$Neuronal_inhib
intersect_genes = intersect(sim_$gene, muscat_$gene)
muscat_ = muscat_[muscat_$gene %in% intersect_genes,]
sim_ = sim_[sim_$gene %in% intersect_genes,]
##Comput order
sim_order_i = order(sim_$p_adj.loc)
muscat_order_i = order(sim_$p_adj.loc)
muscat_order_i = unlist(sapply(sim_$gene[sim_order_i], function(x){
which(x == muscat_$gene[muscat_order_i])}))
q1 = qplot(x = sim_order_e, y = muscat_order_e) +
labs(title = "Ranking of genes, Neuronal_excit",
subtitle = "Method: count_sum_edgeR",
xlab = "Ranking of genes for both simulations",
ylab= "Ranking muscat simulation")
q2 = qplot(x = sim_order_i, y = muscat_order_i) + labs(title = "Ranking of genes, Neuronal_inhib",
subtitle = "Method: count_sum_edgeR",
xlab = "Ranking of genes for both simulations",
ylab= "Ranking muscat simulation")
grid.arrange(q1,q2, ncol = 2)
sim_
