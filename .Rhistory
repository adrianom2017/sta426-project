probs = list(cluster = freq_cluster,
sample = rep(1/n_sample, n_sample),
group = rep(1/n_group, n_group))
lcf = 4
#Set params our simulation
n_comp = 10
n_cells = rep(n_cells_muscat / n_sample, n_sample)
kNN = 10
kNN_subsample = 5
logFC = list(magnitude = lcf, proportion = p_dd[3]) #corresponds to p_dd
verbose = 2
#Run simulations
sce_muscat = simData(sce_prep, n_genes = n_genes, n_cells = n_cells_muscat, p_dd = p_dd, probs = probs)
sce_sim = create_dataset(sce_prep, n_comp, n_cells, kNN, kNN_subsample, n_sample, logFC, probs, verbose)
count(sce_prep) = as.matrix(counts(sce_prep))
count(sce_prep) = as.matrix(count(sce_prep))
counts(sce_prep) = as.matrix(counts(sce_prep))
logcounts(sce_prep) = as.matrix(logcounts(sce_prep))
sce_sim = create_dataset(sce_prep, n_comp, n_cells, kNN, kNN_subsample, n_sample, logFC, probs, verbose)
sce_sim
#Convert counts
sce_muscat = logNormCounts(sce_muscat)
logcounts(sce_prep) = as.matrix(logcounts(sce_prep))
counts(sce_prep) = as.matrix(counts(sce_prep))
#Populate sce_sim with reducedDim
sce_sim = runPCA(sce_sim)
sce_sim = runUMAP(sce_sim)
sce_sim = runTSNE(sce_sim)
#Populate sce_muscat with reducedDim
sce_muscat = runPCA(sce_muscat)
sce_muscat = runUMAP(sce_muscat)
sce_muscat = runTSNE(sce_muscat)
#Populate sce_wt with reducedDim
sce_prep = runPCA(sce_prep)
sce_prep = runUMAP(sce_prep)
sce_prep = runTSNE(sce_prep)
subsample = sample(1:ncol(sce_prep), ncol(sce_sim))
#Distribution of counts
par(mfrow=c(3,1))
hist(logcounts(sce_prep)[sample(1:nrow(sce_prep), nrow(sce_sim))])
hist(logcounts(sce_muscat))
hist(logcounts(sce_sim))
#Sum of counts
countSum = data.frame(sce_prep = sum(counts(sce_prep)[,subsample]),
sce_muscat = sum(counts(sce_muscat)),
sce_sim = sum(counts(sce_sim)))
barplot(as.matrix(countSum), main = "Count sum of different SingleCellExperiment data sets")
table(metadata(sce_sim)$category)
table(metadata(sce_muscat)$category)
#Plot dim reductions
par(mfrow=c(3,1))
plotReducedDim(sce_prep, "PCA", colour_by = "cluster_id")
plotReducedDim(sce_muscat, "PCA", colour_by = "cluster_id", shape_by = "group_id")
plotReducedDim(sce_sim, "PCA", colour_by = "cluster_id", shape_by = "group_id")
par(mfrow=c(3,1))
plotReducedDim(sce_prep, "UMAP", colour_by = "cluster_id")
plotReducedDim(sce_muscat, "UMAP", colour_by = "cluster_id", shape_by = "group_id")
plotReducedDim(sce_sim, "UMAP", colour_by = "cluster_id", shape_by = "group_id")
par(mfrow=c(3,1))
plotReducedDim(sce_prep, "TSNE", colour_by = "cluster_id")
plotReducedDim(sce_muscat, "TSNE", colour_by = "cluster_id", shape_by = "group_id")
plotReducedDim(sce_sim, "TSNE", colour_by = "cluster_id", shape_by = "group_id")
#Cell-cell correlation structure
CellCellCor = list("sce_prep" = cor(counts(sce_prep)[,subsample]),
"sce_muscat" = cor(counts(sce_muscat)),
"sce_sim" = cor(counts(sce_sim)))
x = 1:ncol(sce_muscat)
par(mfrow = c(1,3))
image(x,x,CellCellCor$sce_muscat, axes = FALSE, xlab = '', ylab = '')
image(x,x,CellCellCor$sce_sim, axes = FALSE, xlab = '', ylab = '')
#Gene-Gene correlation structure
#GeneGeneCor = list("sce_prep" = cor(t(counts(sce_prep)[,subsample])),
#                   "sce_muscat" = cor(t(counts(sce_muscat))),
#                   "sce_sim" = cor(t(counts(sce_sim))))
# x = 1:nrow(sce_muscat)
# par(mar = c(5,6,6,4), cex = 0.5)
# image(x,x,GeneGeneCor$sce_muscat, axes = FALSE, xlab = '', ylab = '')
reducedDimNames(sce)
plotReducedDim(sce, "PCA", colour_by = cluster_id)
plotReducedDim(sce, "PCA", colour_by = "cluster_id")
colData(sce)
plotReducedDim(sce, "PCA", colour_by = "cluster_id", shape_by = "group_id")
sce_tmp = sce[colData(sce)$cluster_id == "Neuronal_excit" | colData(sce)$cluster_id == "Neuronal_inhib"]
sce_tmp2 = prepSCE(sce,
cluster_id = "cluster_id",
sample_id = "sample_id",
group_id = "group_id",
drop = FALSE)
sce_tmp2 <- prepSim(sce_tmp2)
sce_tmp2
unique(colData(sce_tmp2)$cluster_id)
unique(colData(sce_tmp2)$group_id)
? prepSim
sce_prep <- prepSCE(sce,
cluster_id = "cluster_id",
sample_id = "sample_id",
group_id = "group_id",
drop = FALSE)
sce_prep <- prepSim(sce_prep, group_keep = "LPS")
unique(colData(sce_prep)$group_id)
unique(colData(sce_prep)$cluster_id)
sce_prep
sce_tmp2
inter = intersect(rownames(sce_prep), rownames(sce_tmp2))
simData()
?simData()
getwd()
knitr::opts_chunk$set(echo = TRUE)
suppressPackageStartupMessages({
library(SingleCellExperiment)
library(scater)
library(tidyverse)
library(ggplot2)
library(gridExtra)
library(grid)
library(edgeR)
library(irlba)
library(muscat)
library(countsimQC)
library(TMB)
library(cowplot)
library(scDblFinder)
library(dplyr)
library(UpSetR)
library(uwot)
library(Rtsne)
})
install.packages(scDblFinder)
BiocManager::install("scDblFinder")
knitr::opts_chunk$set(echo = TRUE)
suppressPackageStartupMessages({
library(SingleCellExperiment)
library(scater)
library(tidyverse)
library(ggplot2)
library(gridExtra)
library(grid)
library(edgeR)
library(irlba)
library(muscat)
library(countsimQC)
library(TMB)
library(cowplot)
library(scDblFinder)
library(dplyr)
library(UpSetR)
library(uwot)
library(Rtsne)
})
#library(sta426)#install_github(adrianom/sta426-project/sta426)
#Load simulation functions
source('./fun.R', echo=TRUE)
source('./Preprocessing_fun.R', echo=TRUE)
#Load object
sce = readRDS("week13_SCE_clustered.rds")
sce = logNormCounts(sce)
sce = prep_steps(sce)
View(prep_steps)
View(prep_steps)
View(prep_steps)
View(prep_steps)
View(prep_steps)
sce
knitr::opts_chunk$set(echo = TRUE)
suppressPackageStartupMessages({
library(SingleCellExperiment)
library(scater)
library(tidyverse)
library(ggplot2)
library(gridExtra)
library(grid)
library(edgeR)
library(irlba)
library(muscat)
library(countsimQC)
library(TMB)
library(cowplot)
library(scDblFinder)
library(dplyr)
library(UpSetR)
library(uwot)
library(Rtsne)
})
#library(sta426)#install_github(adrianom/sta426-project/sta426)
#Load simulation functions
source('./fun.R', echo=TRUE)
source('./Preprocessing_fun.R', echo=TRUE)
#Load object
sce = readRDS("week13_SCE_clustered.rds")
sce = logNormCounts(sce)
#sce = prep_steps(sce)
# make WT reference group
sce$group_id <- relevel(sce$group_id, ref = "WT")
# reorder sample levels
#m <- match(levels(sce$sample_id), sce$sample_id)
#o <- order(sce$group_id[m])
#sce$sample_id <- factor(sce$sample_id, levels = levels(sce$sample_id)[o])
##Prep data for simulation
sce_prep <- prepSCE(sce,
cluster_id = "cluster_id",
sample_id = "sample_id",
group_id = "group_id",
drop = FALSE)
sce_prep <- prepSim(sce_prep)
counts(sce_prep) = as.matrix(counts(sce_prep))
logcounts(sce_prep) = as.matrix(logcounts(sce_prep))
n_cluster = length(unique(colData(sce_prep)$cluster_id))
freq_cluster = table(colData(sce_prep)$cluster_id)
freq_cluster = freq_cluster / sum(freq_cluster)
n_sample = length(unique(colData(sce_prep)$sample_id))
n_group = 2
#Set params MUSCAT
n_genes = nrow(sce_prep)
n_cells_muscat = 100*n_sample
p_dd = c(0.9, 0, 0.1, 0, 0, 0)
probs = list(cluster = freq_cluster,
sample = rep(1/n_sample, n_sample),
group = rep(1/n_group, n_group))
lfc = 4
#Set params our simulation
n_comp = 10
n_cells = rep(n_cells_muscat / n_sample, n_sample)
kNN = 10
kNN_subsample = 5
#logFC = list(magnitude = lfc, proportion = p_dd[3]) #corresponds to p_dd
verbose = 0
#Run simulations
sce_muscat = simData(sce_prep, n_genes = n_genes, n_cells = n_cells_muscat, p_dd = p_dd, probs = probs, lfc = lfc)
#Extract meta data
meta = metadata(sce_muscat)$gene_info %>% select(cluster_id, logFC, sim_gene)
meta$logFC[is.na(meta$logFC)] = 0
#Set up sce to replicate muscat simulation
gene_id = meta %>% filter(cluster_id == "Neuronal_excit") %>% select(sim_gene)
idx = sapply(gene_id$sim_gene, function(x){
which(x == rownames(sce_prep))
})
#hist(table(idx))
sce_prep2 = sce_prep[idx,]
logFC = list("muscat_data" = meta)
sce_sim = create_dataset(sce_prep2, n_comp, n_cells, kNN, kNN_subsample, n_sample, logFC, probs, verbose)
#Compare metadata
#head(metadata(sce_muscat)$gene_info,10)
#head(metadata(sce_sim)$gene_info,5)
#metadata(sce_sim)$cluster_info
sce_sim
colData(sce_sim)
metadata(sce_sim)
? mapply
mapply(rep, 1:4, 4:1)
? c
c(c(1,2), c(3,4), recursive = T)
c(c(1,2), c(3,4), recursive = F)
? c(9)
? c()
? c
metadata(sce_sim)
metadata(sce_sim)$gene_i
metadata(sce_sim)$gene_info
metadata(sce_sim)$gene_i[3,4]
metadata(sce_sim)$gene_info[3,4]
tmp = metadata(sce_sim)
mapply(list,c(1:4), c(5:6), SIMPLIFY = FALSE)
? mapply
mapply(vector,c(1:4), c(5:6), SIMPLIFY = FALSE)
unlist(mapply(list,c(1:4), c(5:6), SIMPLIFY = FALSE))
mapply(c,c(1:4), c(5:6), SIMPLIFY = FALSE)
mapply(c,c(1:4), c(5:6), SIMPLIFY = TRUE)
rep(c(1:2), each = 2)
gene_info = metadata(sce_sim)$gene_info
gene_merge = data.frame(gene = rep(gene_info$gene, each = 2),
sim_gene = rep(gene_info$sim_gene, each = 2),
logFC = unlist(mapply(c,c(1:4), c(5:6), SIMPLIFY = FALSE)))
gene = rep(gene_info$gene, each = 2)
gene
rep(gene_info$sim_gene, each = 2)
gene_merge = data.frame(gene = rep(gene_info$gene, each = 2),
sim_gene = rep(gene_info$sim_gene, each = 2),
logFC = unlist(mapply(c,gene_info$logFC1, gene_info$logFC2, SIMPLIFY = FALSE)))
gene_merge
head(gene_merge)
source('~/OneDrive - ETHZ/Master/2. Semester/Statistical_Analysis_of_High_Throughput_Genomic_and_Transcriptomic_Data/sta426-project/fun.R', echo=TRUE)
sce_sim = create_dataset(sce_prep2, n_comp, n_cells, kNN, kNN_subsample, n_sample, logFC, probs, verbose)
sce_sim
metadata(sce_si)$gene_info2
metadata(sce_sim)$gene_info2
source('~/OneDrive - ETHZ/Master/2. Semester/Statistical_Analysis_of_High_Throughput_Genomic_and_Transcriptomic_Data/sta426-project/fun.R', echo=TRUE)
source('~/OneDrive - ETHZ/Master/2. Semester/Statistical_Analysis_of_High_Throughput_Genomic_and_Transcriptomic_Data/sta426-project/fun.R', echo=TRUE)
sce_sim = create_dataset(sce_prep2, n_comp, n_cells, kNN, kNN_subsample, n_sample, logFC, probs, verbose)
metadata(sce_sim)$gene_info2
head(metadata(sce_sim)$gene_info2)
head(metadata(sce_sim)$gene_info)
metadata(sce_sim)$cluster_info
head(metadata(sce_muscat)$gene_info)
knitr::opts_chunk$set(echo = TRUE)
suppressPackageStartupMessages({
library(SingleCellExperiment)
library(scater)
library(tidyverse)
library(ggplot2)
library(gridExtra)
library(grid)
library(edgeR)
library(irlba)
library(muscat)
library(countsimQC)
library(TMB)
library(cowplot)
library(scDblFinder)
library(dplyr)
library(UpSetR)
library(uwot)
library(Rtsne)
})
#library(sta426)#install_github(adrianom/sta426-project/sta426)
#Load simulation functions
source('./fun.R', echo=TRUE)
source('./Preprocessing_fun.R', echo=TRUE)
#Load object
sce = readRDS("week13_SCE_clustered.rds")
sce = logNormCounts(sce)
#sce= prep_steps(sce)
# make WT reference group
#sce$group_id <- relevel(sce$group_id, ref = "WT")
# reorder sample levels
#m <- match(levels(sce$sample_id), sce$sample_id)
#o <- order(sce$group_id[m])
#sce$sample_id <- factor(sce$sample_id, levels = levels(sce$sample_id)[o])
##Prep data for simulation
sce_prep <- prepSCE(sce,
cluster_id = "cluster_id",
sample_id = "sample_id",
group_id = "group_id",
drop = FALSE)
sce_prep <- prepSim(sce_prep)
counts(sce_prep) = as.matrix(counts(sce_prep))
logcounts(sce_prep) = as.matrix(logcounts(sce_prep))
n_cluster = length(unique(colData(sce_prep)$cluster_id))
freq_cluster = table(colData(sce_prep)$cluster_id)
freq_cluster = freq_cluster / sum(freq_cluster)
n_sample = length(unique(colData(sce_prep)$sample_id))
n_group = 2
#Set params MUSCAT
n_genes = nrow(sce_prep)
n_cells_muscat = 100*n_sample
p_dd = c(0.9, 0, 0.1, 0, 0, 0)
probs = list(cluster = freq_cluster,
sample = rep(1/n_sample, n_sample),
group = rep(1/n_group, n_group))
lfc = 4
#Set params our simulation
n_comp = 10
n_cells = rep(n_cells_muscat / n_sample, n_sample)
kNN = 10
kNN_subsample = 5
#logFC = list(magnitude = lfc, proportion = p_dd[3]) #corresponds to p_dd
verbose = 0
#Run simulations
sce_muscat = simData(sce_prep, n_genes = n_genes, n_cells = n_cells_muscat, p_dd = p_dd, probs = probs, lfc = lfc)
#Extract meta data
meta = metadata(sce_muscat)$gene_info %>% select(cluster_id, logFC, sim_gene)
meta$logFC[is.na(meta$logFC)] = 0
#Set up sce to replicate muscat simulation
gene_id = meta %>% filter(cluster_id == "Neuronal_excit") %>% select(sim_gene)
idx = sapply(gene_id$sim_gene, function(x){
which(x == rownames(sce_prep))
})
#hist(table(idx))
sce_prep2 = sce_prep[idx,]
logFC = list("muscat_data" = meta)
#Run simulation
sce_sim = create_dataset(sce_prep2, n_comp, n_cells, kNN, kNN_subsample, n_sample, logFC, probs, verbose)
#Compare metadata
#head(metadata(sce_muscat)$gene_info,10)
#head(metadata(sce_sim)$gene_info,5)
#metadata(sce_sim)$cluster_info
#Convert counts
sce_muscat = logNormCounts(sce_muscat)
logcounts(sce_prep) = as.matrix(logcounts(sce_prep))
counts(sce_prep) = as.matrix(counts(sce_prep))
#Populate sce_sim with reducedDim
sce_sim = runPCA(sce_sim)
sce_sim = runUMAP(sce_sim)
sce_sim = runTSNE(sce_sim)
#Populate sce_muscat with reducedDim
sce_muscat = runPCA(sce_muscat)
sce_muscat = runUMAP(sce_muscat)
sce_muscat = runTSNE(sce_muscat)
#Populate sce_wt with reducedDim
sce_prep = runPCA(sce_prep)
sce_prep = runUMAP(sce_prep)
sce_prep = runTSNE(sce_prep)
subsample = sample(1:ncol(sce_prep), ncol(sce_sim))
#Distribution of counts
par(mfrow=c(3,1))
hist(logcounts(sce_prep)[sample(1:nrow(sce_prep), nrow(sce_sim))])
hist(logcounts(sce_muscat))
hist(logcounts(sce_sim))
#Sum of counts
countSum = data.frame(sce_prep = sum(counts(sce_prep)[,subsample]),
sce_muscat = sum(counts(sce_muscat)),
sce_sim = sum(counts(sce_sim)))
par(mfrow=c(1,1))
barplot(as.matrix(countSum), main = "Count sum of different SingleCellExperiment data sets")
table(metadata(sce_sim)$category)
table(metadata(sce_muscat)$category)
#Plot dim reductions
par(mfrow=c(3,1))
plotReducedDim(sce_prep, "PCA", colour_by = "cluster_id")
plotReducedDim(sce_muscat, "PCA", colour_by = "cluster_id", shape_by = "group_id")
plotReducedDim(sce_sim, "PCA", colour_by = "cluster_id", shape_by = "group_id")
par(mfrow=c(3,1))
plotReducedDim(sce_prep, "UMAP", colour_by = "cluster_id")
plotReducedDim(sce_muscat, "UMAP", colour_by = "cluster_id", shape_by = "group_id")
plotReducedDim(sce_sim, "UMAP", colour_by = "cluster_id", shape_by = "group_id")
par(mfrow=c(3,1))
plotReducedDim(sce_prep, "TSNE", colour_by = "cluster_id")
plotReducedDim(sce_muscat, "TSNE", colour_by = "cluster_id", shape_by = "group_id")
plotReducedDim(sce_sim, "TSNE", colour_by = "cluster_id", shape_by = "group_id")
#Cell-cell correlation structure
CellCellCor = list("sce_prep" = cor(counts(sce_prep)[,subsample]),
"sce_muscat" = cor(counts(sce_muscat)),
"sce_sim" = cor(counts(sce_sim)))
x = 1:ncol(sce_muscat)
par(mfrow = c(1,2))
image(x,x,CellCellCor$sce_muscat, axes = FALSE, xlab = '', ylab = '')
image(x,x,CellCellCor$sce_sim, axes = FALSE, xlab = '', ylab = '')
#Gene-Gene correlation structure
#GeneGeneCor = list("sce_prep" = cor(t(counts(sce_prep)[,subsample])),
#                   "sce_muscat" = cor(t(counts(sce_muscat))),
#                   "sce_sim" = cor(t(counts(sce_sim))))
# x = 1:nrow(sce_muscat)
# par(mar = c(5,6,6,4), cex = 0.5)
# image(x,x,GeneGeneCor$sce_muscat, axes = FALSE, xlab = '', ylab = '')
#Run count
DESeq_sim = DESeq2::DESeqDataSetFromMatrix(counts(sce_sim), colData(sce_sim), ~cluster_id*group_id)
DESeq_muscat = DESeq2::DESeqDataSetFromMatrix(counts(sce_muscat), colData(sce_muscat), ~cluster_id*group_id)
DESeq_prep = DESeq2::DESeqDataSetFromMatrix(counts(sce_prep), colData(sce_prep), ~cluster_id)
QCdata = list("Original" = DESeq_prep, "Muscat" = DESeq_muscat, "Sim" = DESeq_sim)
countsimQCReport(ddsList = QCdata, outputFile = "countsim_report.html",
outputDir = "./CountSimReport/", outputFormat = "html_document",
showCode = FALSE, forceOverwrite = TRUE,
savePlots = TRUE, description = "This is my test report.",
maxNForCorr = 25, maxNForDisp = Inf,
calculateStatistics = TRUE, subsampleSize = 25,
kfrac = 0.01, kmin = 5,
permutationPvalues = FALSE, nPermutations = NULL)
source('./Muscat_Simulation_Fun.R', echo=TRUE)
Simulation_DS_analysis<-function(sce,pos){
methods <- list("sum_counts_edgeR","sum_counts_limma-voom","mean_logcounts_edgeR",
"mean_logcounts_limma-voom","mm_dream","mm_nbinom","mm_vst_DESeq")
g <- ggplot() + geom_point()
print(typeof(g))
num = 0
for (method in methods){
num = num +1
print(method)
print("Hello")
method_pieces <- strsplit(method, "_")
#print(method_pieces)
method_substring <- matrix(unlist(method_pieces), ncol=3, byrow=TRUE)
#print(method_substring)
if (pos!=3 && pos!=4){
print("Invalid gene_info argument position")
break
}
topnumber = 0
vst = NULL
ds <- list()
if (grepl("mm_",method)){
if (method_substring[2] == "dream"){
topnumber = 8
}
else if (method_substring[2] == "vst"){
topnumber = 8
vst = method_substring[3]
}
print(method)
ds <- DS.analysis.mm(sce,method_substring[2],method_substring[1],vst,topnumber,pos)
#Visualization
p <- DS.analysis.Visualization.mm(ds,method_substring[2],method_substring[1],vst,topnumber,num)
}
else{
if (!(method_substring[1] == "logcounts" && method_substring[3] == "edgeR")){
topnumber = 8
}
#DS pb analysis
ds <- DS.analysis.pd(sce,method_substring[2],method_substring[1],method_substring[3], topnumber,pos)
#Visualization
p <- DS.analysis.Visualization.pb(ds,method_substring[2],method_substring[1],method_substring[3],topnumber,num)
}
print("DONE!!")
}
}
Simulation_DS_analysis(sce_muscat,3)
res
res = readRDS("output/DS_results_ counts _ sum _ edgeR .rds")
res
res$table$B$Neuronal_excit
head(res$table$B$Neuronal_excit)
head(metadata(sce_sim)$gene_info)
metadata(sce_sim)$cluster_info
plot(metadata(sce_sim)$gene_info$logFC1, res$table$B$Neuronal_excit$logFC)
length(res$table$B$Neuronal_excit$logFC)
length(metadata(sce_sim)$gene_info$logFC1)
where(res$table$B$Neuronal_excit$gene == "gene3")
head(res$table$B$Neuronal_excit,20)
head(metadata(sce_sim)$gene_info, 20)
head(res$table$B$Neuronal_excit,20)
head(metadata(sce_sim)$gene_info, 30)
head(metadata(sce_sim)$cluster_info)
head(res$table$B$Neuronal_inhib,20)
head(metadata(sce_sim)$gene_info, 30)
