group = rep(1/n_group, n_group))
lfc = 4
n_comp = 10
n_cells = rep(n_cells_muscat / n_sample, n_sample)
kNN = 10
kNN_subsample = 5
verbose = 0
sce_muscat = simData(sce_prep, n_genes = n_genes, n_cells = n_cells_muscat, p_dd = p_dd, probs = probs, lfc = lfc)
meta = metadata(sce_muscat)$gene_info %>% select(cluster_id, logFC, sim_gene)
meta$logFC[is.na(meta$logFC)] = 0
gene_id = meta %>% filter(cluster_id == "Neuronal_excit") %>% select(sim_gene)
idx = sapply(gene_id$sim_gene, function(x){
which(x == rownames(sce_prep))
})
sce_prep2 = sce_prep[idx,]
logFC = list("muscat_data" = meta)
sce_sim = create_dataset(sce_prep2, n_comp, n_cells, kNN, kNN_subsample, n_sample, logFC, probs, verbose)
#Convert counts
sce_muscat = logNormCounts(sce_muscat)
logcounts(sce_prep) = as.matrix(logcounts(sce_prep))
counts(sce_prep) = as.matrix(counts(sce_prep))
#Populate sce_sim with reducedDim
sce_sim = runPCA(sce_sim)
sce_sim = runUMAP(sce_sim)
sce_sim = runTSNE(sce_sim)
#Populate sce_muscat with reducedDim
sce_muscat = runPCA(sce_muscat)
sce_muscat = runUMAP(sce_muscat)
sce_muscat = runTSNE(sce_muscat)
#Populate sce_wt with reducedDim
sce_prep = runPCA(sce_prep)
sce_prep = runUMAP(sce_prep)
sce_prep = runTSNE(sce_prep)
source('./Muscat_Simulation_Fun.R', echo=TRUE)
source('./Muscat_Simulation_Fun.R', echo=FALSE)
library(tidyverse)
sce_all_methods <- do.call('rbind', lapply(list.files(path = "output/muscat", full.names = TRUE), readRDS))
sce_all_ma
sce_all_methods
tbl = sce_all_methods[1,1]
tbl
Simulation_DS_analysis<-function(sce,pos,sim_type){
#methods <- list("sum_counts_edgeR","sum_counts_limma-voom","mean_logcounts_edgeR",
#           "mean_logcounts_limma-voom")
methods <- list("sum_counts_edgeR")
# methods <- list("sum_counts_edgeR","sum_counts_limma-voom","mean_logcounts_edgeR",
#           "mean_logcounts_limma-voom","mm_dream","mm_nbinom","mm_vst_DESeq")
#violin_1_plot  = list()
#violin_2_plot  = list()
#upset_plot_cluster = list()
#ds_expression_plot = list()
#TPR.vs.FDR_plot = list()
num = 0
for (method in methods){
num = num +1
method_pieces <- strsplit(method, "_")
#print(method_pieces)
method_substring <- matrix(unlist(method_pieces), ncol=3, byrow=TRUE)
#print(method_substring)
if (pos!=3 && pos!=4){
print("Invalid gene_info argument position")
break
}
topnumber = 0
vst = NULL
ds <- list()
if (grepl("mm_",method)){
if (method_substring[2] == "dream"){
topnumber = 8
}
else if (method_substring[2] == "vst"){
topnumber = 8
vst = method_substring[3]
}
print(method)
ds <- DS.analysis.mm(sce,method_substring[2],method_substring[1],vst,topnumber,pos)
#Visualization
plots <- DS.analysis.Visualization.mm(ds,method_substring[2],method_substring[1],vst,topnumber,num,sim_type)
}
else{
if (!(method_substring[1] == "logcounts" && method_substring[3] == "edgeR")){
topnumber = 8
}
#DS pb analysis
ds <- DS.analysis.pd(sce,method_substring[2],method_substring[1],method_substring[3], topnumber,pos)
#print("DS")
#print(ds)
#print("LEN Neur excit")
#print(length(ds$res$table$B$Neuronal_excit$logFC)) # M : 6948, S : 9373
# print("LEN Neur inhib")
#print(length(ds$res$table$B$Neuronal_inhib$logFC)) # M : 4762 S : 9229
#Visualization
plots <- DS.analysis.Visualization.pb(ds,method_substring[2],method_substring[1],method_substring[3],topnumber,num,sim_type)
}
#  if (!(is_null(plots$v1))){
#    violin_1_plot[[num]] <- plots$v1
#  }
#  if (!is_null(plots$v2)){
#     violin_2_plot[[num]] <- plots$v2
#  }
#  if (!is_null(plots$upset)){
#    upset_plot_cluster[[num]] <-  plots$upset
#  }
#  if (!is_null(plots$ds_expression)){
#    ds_expression_plot[[num]] <- plots$ds_expression
#  }
#  if (!is_null(plots$TPR.vs.FDR)){
#    TPR.vs.FDR_plot[[num]] <- plots$TPR.vs.FDR
# }
print("DONE!!")
for(element in plots){
if (!is_null(element)){
print(element)
}
}
#break
}
# violin_1 = plot_grid(plotlist=violin_1_plot,labels = c('A', 'B','C','D','E','F','G'), label_size = 12)
#violin_2 =  plot_grid(plotlist=violin_2_plot,labels =  c('A', 'B','C','D','E','F','G'), label_size = 12)
#upset = plot_grid(plotlist=upset_plot_cluster,labels =  c('A', 'B','C','D','E','F','G'), label_size = 12)
#ds_expression = plot_grid(plotlist=ds_expression_plot,labels =  c('A', 'B','C','D','E','F','G'), label_size = 12)
#TPR.vs.FDR = plot_grid(plotlist=TPR.vs.FDR_plot,labels =  c('A', 'B','C','D','E','F','G'), label_size = 12)
#save_plot("violin_1.png", violin_1, ncol = 1)
#save_plot("violin_2.png", violin_2, ncol = 1)
#save_plot("upset.png", upset, ncol = 1)
#save_plot("ds_expression.png", ds_expression, ncol = 1)
#save_plot("TPR.vs.FDR.png", TPR.vs.FDR, ncol = 1)
}
Simulation_DS_analysis(sce_muscat,3,"muscat")
Simulation_DS_analysis(sce_sim,4,"correlation_structure")
res_muscat = load("output/muscat/DS_results_counts_sum_edgeR.rds")
res_sim = load("output/correlation_structure/DS_results_counts_sum_edgeR.rds")
res_muscat = readRDS("output/muscat/DS_results_counts_sum_edgeR.rds")
res_sim = readRDS("output/correlation_structure/DS_results_counts_sum_edgeR.rds")
res_muscat$data
res_muscat$table$
A
res_muscat$table
head(rownames(sce_sim))
idx_sim_ne = sapply(res_sim$table$B$Neuronal_excit$gene, function(x){
which(x == rownames(sce_sim))
})
idx_sim_ne = sapply(res_sim$table$B$Neuronal_excit$gene, function(x){
which(x == rownames(sce_sim))
})
#Obtain all idx for the genes in DE analysis
idx_sim_ne = sapply(res_sim$table$B$Neuronal_excit$gene, function(x){
which(x == rownames(sce_sim))
})
idx_sim_ni = sapply(res_sim$table$B$Neuronal_inhib$gene, function(x){
which(x == rownames(sce_sim))
})
idx_mu_ne = sapply(res_muscat$table$B$Neuronal_excit$gene, function(x){
which(x == rownames(sce_muscat))
})
idx_mu_ni = sapply(res_muscat$table$B$Neuronal_inhib$gene, function(x){
which(x == rownames(sce_muscat))
})
mm = metadata(sce_muscat)
ms = metadata(sce_sim)
mm
lfc_mm_ne = mm$gene_info %>% filter(cluster_id == "Neuronal_excit") %>% select(logFC)
lfc_mm_ne
[
lfc_mm_ne = mm$gene_info %>% filter(cluster_id == "Neuronal_excit") %>% select(logFC) %>% unlist()
lfc_mm_ne
lfc_mm_ne = mm$gene_info %>% filter(cluster_id == "Neuronal_excit") %>% select(logFC) %>% c()
lfc_mm_ne
lfc_mm_ne = mm$gene_info %>% filter(cluster_id == "Neuronal_excit") %>% select(logFC) %>% $logFC
lfc_mm_ne = mm$gene_info %>% filter(cluster_id == "Neuronal_excit") %>% select(logFC)
lfc_mm_ne = lfc_mm_ne$logFC
lfc_mm_ne[is.na(lfc_mm_ne)] = 0
lfc_mm_ne
lfc_mm_ni = mm$gene_info %>% filter(cluster_id == "Neuronal_inhib") %>% select(logFC)
lfc_mm_ni = lfc_mm_ni$logFC
lfc_mm_ni[is.na(lfc_mm_ni)] = 0
ms$gene_info2
lfc_ms_ne = ms$gene_info2 %>% filter(cluster_id == "Neuronal_excit") %>% select(logFC)
lfc_ms_ne = lfc_ms_ne$logFC
lfc_ms_ni = ms$gene_info2 %>% filter(cluster_id == "Neuronal_inhib") %>% select(logFC)
lfc_ms_ni = lfc_ms_ni$logFC
all(lfc_mm_ne == lfc_ms_ne)
lfc_res_mm_ne = res_muscat$table$B$Neuronal_excit$logFC
lfc_res_mm_ne
lfc_res_ms_ne = res_sim$table$B$Neuronal_excit$logFC
lfc_res_ms_ni = res_sim$table$B$Neuronal_inhib$logFC
lfc_res_mm_ne = res_muscat$table$B$Neuronal_excit$logFC
lfc_res_mm_ni = res_muscat$table$B$Neuronal_inhib$logFC
lfc_res_ms_ne = res_sim$table$B$Neuronal_excit$logFC
lfc_res_ms_ni = res_sim$table$B$Neuronal_inhib$logFC
length(lfc_res_ms_ne)
length(lfc_res_ms_ni)
mm = metadata(sce_muscat)
ms = metadata(sce_sim)
lfc_mm_ne = mm$gene_info %>% filter(cluster_id == "Neuronal_excit") %>% select(logFC)
lfc_mm_ne = lfc_mm_ne$logFC
lfc_mm_ne[is.na(lfc_mm_ne)] = 0
lfc_mm_ne = lfc_mm_ne[idx_mu_ne]
lfc_mm_ni = mm$gene_info %>% filter(cluster_id == "Neuronal_inhib") %>% select(logFC)
lfc_mm_ni = lfc_mm_ni$logFC
lfc_mm_ni[is.na(lfc_mm_ni)] = 0
lfc_mm_ni = lfc_mm_ni[idx_mu_ni]
lfc_ms_ne = ms$gene_info2 %>% filter(cluster_id == "Neuronal_excit") %>% select(logFC)
lfc_ms_ne = lfc_ms_ne$logFC
lfc_ms_ne = lfc_ms_ne[idx_sim_ne]
lfc_ms_ni = ms$gene_info2 %>% filter(cluster_id == "Neuronal_inhib") %>% select(logFC)
lfc_ms_ni = lfc_ms_ni$logFC
lfc_ms_ni = lfc_ms_ni[idx_sim_ni]
lfc_res_mm_ne = res_muscat$table$B$Neuronal_excit$logFC
lfc_res_mm_ni = res_muscat$table$B$Neuronal_inhib$logFC
lfc_res_ms_ne = res_sim$table$B$Neuronal_excit$logFC
lfc_res_ms_ni = res_sim$table$B$Neuronal_inhib$logFC
plot(lfc_mm_ni, lfc_res_mm_ni)
plot(lfc_mm_ne, lfc_res_mm_ne)
plot(lfc_ms_ni, lfc_res_ms_ni)
plot(lfc_ms_ne, lfc_res_ms_ne)
? par()
par(mfrow = c(2,2))
plot(lfc_mm_ni, lfc_res_mm_ni)
plot(lfc_mm_ne, lfc_res_mm_ne)
plot(lfc_ms_ni, lfc_res_ms_ni)
plot(lfc_ms_ne, lfc_res_ms_ne)
#plot simulated logFC (true) vs computed logFC by DE analysis
par(mfrow = c(2,2))
plot(lfc_mm_ni, lfc_res_mm_ni)
plot(lfc_mm_ne, lfc_res_mm_ne)
plot(lfc_ms_ni, lfc_res_ms_ni)
plot(lfc_ms_ne, lfc_res_ms_ne)
?upset()
#Construct vectors of p.adj for the genes in the analysis
mm = metadata(sce_muscat)
ms = metadata(sce_sim)
DE_mm_ne = mm$gene_info %>% filter(cluster_id == "Neuronal_excit") %>% select(logFC)
DE_mm_ne = lfc_mm_ne$logFC
mm = metadata(sce_muscat)
ms = metadata(sce_sim)
DE_mm_ne = mm$gene_info %>% filter(cluster_id == "Neuronal_excit") %>% select(logFC)
DE_mm_ne = lfc_mm_ne$logFC
#Construct vectors of p.adj for the genes in the analysis
mm = metadata(sce_muscat)
ms = metadata(sce_sim)
DE_mm_ne = mm$gene_info %>% filter(cluster_id == "Neuronal_excit") %>% select(logFC)
DE_mm_ne = DE_mm_ne$logFC
DE_mm_ne[is.na(DE_mm_ne)] = 0
DE_mm_ne = DE_mm_ne[idx_mu_ne]
DE_mm_ne[DE_mm_ne != 0] = 1 #set all DE genes to 1
DE_mm_ni = mm$gene_info %>% filter(cluster_id == "Neuronal_inhib") %>% select(logFC)
DE_mm_ni = DE_mm_ni$logFC
DE_mm_ni[is.na(DE_mm_ni)] = 0
DE_mm_ni = DE_mm_ni[idx_mu_ni]
DE_ms_ne = ms$gene_info2 %>% filter(cluster_id == "Neuronal_excit") %>% select(logFC)
DE_ms_ne = DE_ms_ne$logFC
DE_ms_ne = DE_ms_ne[idx_sim_ne]
DE_ms_ni = ms$gene_info2 %>% filter(cluster_id == "Neuronal_inhib") %>% select(logFC)
DE_ms_ni = DE_ms_ni$logFC
DE_ms_ni = DE_ms_ni[idx_sim_ni]
DE_res_mm_ne = res_muscat$table$B$Neuronal_excit$p_adj.loc
DE_res_mm_ne[DE_res_mm_ne <= 0.05] = 1
DE_res_mm_ne[DE_res_mm_ne > 0.05] = 0
DE_res_mm_ni = res_muscat$table$B$Neuronal_inhib$p_adj.loc
DE_res_mm_ni[DE_res_mm_ni <= 0.05] = 1
DE_res_mm_ni[DE_res_mm_ni > 0.05] = 0
DE_res_ms_ne = res_sim$table$B$Neuronal_excit$p_adj.loc
DE_res_ms_ne[DE_res_ms_ne <= 0.05] = 1
DE_res_ms_ne[DE_res_ms_ne > 0.05] = 0
DE_res_ms_ni = res_sim$table$B$Neuronal_inhib$p_adj.loc
DE_res_ms_ni[DE_res_ms_ni <= 0.05] = 1
DE_res_ms_ni[DE_res_ms_ni > 0.05] = 0
upset_data_mm_ne = data.frame(True = DE_mm_ne, Predicted(p.adj < 0.5) = DE_res_mm_ne)
upset_data_mm_ne = data.frame(True = DE_mm_ne, Predicted = DE_res_mm_ne)
upset_data_mm_ne
sum(DE_res_mm_ne)
DE_res_mm_ne
res_sim$table$B$Neuronal_excit$p_adj.loc
DE_res_mm_ne = res_muscat$table$B$Neuronal_excit$p_adj.loc
DE_res_mm_ne[DE_res_mm_ne <= 0.05] = 1
DE_res_mm_ne
DE_res_mm_ne = res_muscat$table$B$Neuronal_excit$p_adj.loc
DE_res_mm_ne
DE_res_mm_ne[DE_res_mm_ne > 0.05] = 0
DE_res_mm_ne
DE_res_mm_ne[DE_res_mm_ne <= 0.05] = 1
DE_res_mm_ne
DE_res_mm_ne = res_muscat$table$B$Neuronal_excit$p_adj.loc
DE_res_mm_ne[DE_res_mm_ne <= 0.05] = 1
DE_res_mm_ne = rep(0, nrow(res_muscat$table$B$Neuronal_excit))
DE_res_mm_ne[res_muscat$table$B$Neuronal_excit$p_adj.loc <= 0.05] = 1
DE_res_mm_ni = rep(0, nrow(res_muscat$table$B$Neuronal_inhib))
DE_res_mm_ni[res_muscat$table$B$Neuronal_inhib$p_adj.loc <= 0.05] = 1
sum(DE_res_mm_ne)
DE_res_mm_ne = rep(0, nrow(res_muscat$table$B$Neuronal_excit))
DE_res_mm_ne[res_muscat$table$B$Neuronal_excit$p_adj.loc <= 0.05] = 1
DE_res_mm_ni = rep(0, nrow(res_muscat$table$B$Neuronal_inhib))
DE_res_mm_ni[res_muscat$table$B$Neuronal_inhib$p_adj.loc <= 0.05] = 1
DE_res_ms_ne = rep(0, nrow(res_sim$table$B$Neuronal_excit))
DE_res_ms_ne[res_sim$table$B$Neuronal_excit$p_adj.loc <= 0.05] = 1
DE_res_ms_ni = rep(0, nrow(res_sim$table$B$Neuronal_inhib))
DE_res_ms_ni[res_sim$table$B$Neuronal_inhib$p_adj.loc <= 0.05] = 1
upset_data_mm_ne = data.frame(True = DE_mm_ne, Predicted = DE_res_mm_ne)
upset_data_mm_ni = data.frame(True = DE_mm_ni, Predicted = DE_res_mm_ni)
upset_data_ms_ne = data.frame(True = DE_ms_ne, Predicted = DE_res_ms_ne)
upset_data_ms_ni = data.frame(True = DE_ms_ni, Predicted = DE_res_ms_ni)
upset_data_mm_ne
g = upset(upset_data_mm_ne)
g
colsum(upset_data_mm_ne)
colSums(upset_data_mm_ne)
? upset
?grid.arrange()
g1 = upset(upset_data_mm_ne, empty.intersections = TRUE)
g2 = upset(upset_data_mm_ne, empty.intersections = TRUE)
g3 = upset(upset_data_mm_ne, empty.intersections = TRUE)
g4 = upset(upset_data_mm_ne, empty.intersections = TRUE)
grid.arrange(g1,g2,g3,g4, nrow = 2)
grid.arrange(g1,g2,g3,g4)
grid.arrange(g1)
g1
library("gridExtra")
grid.arrange(g1, nrow = 1, ncol = 1)
g1 = upset(upset_data_mm_ne, empty.intersections = TRUE)
g2 = upset(upset_data_mm_ne, empty.intersections = TRUE)
g3 = upset(upset_data_mm_ne, empty.intersections = TRUE)
g4 = upset(upset_data_mm_ne, empty.intersections = TRUE)
grid.arrange(g1, nrow = 1)
g1
grid.arrange(g1, g2,nrow = 1)
g1 = upset(upset_data_mm_ne, empty.intersections = TRUE)
g2 = upset(upset_data_mm_ne, empty.intersections = TRUE)
g3 = upset(upset_data_mm_ne, empty.intersections = TRUE)
g4 = upset(upset_data_mm_ne, empty.intersections = TRUE)
g1
g2
g3
g4
g1
g2
g1
g2
g3
g4
mm$gene_info
tmp = mm$gene_info %>% filter(cluster_id == "Neuronal_inhib")
sum(tmp$category == "de")
tmp = mm$gene_info %>% filter(cluster_id == "Neuronal_inhib", category == "de")
tmp
tmp = nrow(mm$gene_info %>% filter(cluster_id == "Neuronal_inhib", category == "de"))
tmp
tmp = nrow(mm$gene_info %>% filter(cluster_id == "Neuronal_exibit", category == "de"))
tmp
mm$gene_info
tmp = nrow(mm$gene_info %>% filter(cluster_id == "Neuronal_excit", category == "de"))
tmp
tmp = nrow(mm$gene_info %>% filter(cluster_id == "Neuronal_inhib", category == "de"))
tmp
#True vs predicted
g1 = upset(upset_data_mm_ne, empty.intersections = TRUE)
g2 = upset(upset_data_mm_ni, empty.intersections = TRUE)
upset_data_mm_ni
#Construct vectors of p.adj for the genes in the analysis
mm = metadata(sce_muscat)
ms = metadata(sce_sim)
DE_mm_ne = mm$gene_info %>% filter(cluster_id == "Neuronal_excit") %>% select(logFC)
DE_mm_ne = DE_mm_ne$logFC
DE_mm_ne[is.na(DE_mm_ne)] = 0
DE_mm_ne = DE_mm_ne[idx_mu_ne]
DE_mm_ne[DE_mm_ne != 0] = 1 #set all DE genes to 1
DE_mm_ni = mm$gene_info %>% filter(cluster_id == "Neuronal_inhib") %>% select(logFC)
DE_mm_ni = DE_mm_ni$logFC
DE_mm_ni[is.na(DE_mm_ni)] = 0
DE_mm_ni = DE_mm_ni[idx_mu_ni]
DE_mm_ni[DE_mm_ni != 0] = 1 #set all DE genes to 1
DE_ms_ne = ms$gene_info2 %>% filter(cluster_id == "Neuronal_excit") %>% select(logFC)
DE_ms_ne = DE_ms_ne$logFC
DE_ms_ne = DE_ms_ne[idx_sim_ne]
DE_ms_ne[DE_ms_ne != 0] = 1
DE_ms_ni = ms$gene_info2 %>% filter(cluster_id == "Neuronal_inhib") %>% select(logFC)
DE_ms_ni = DE_ms_ni$logFC
DE_ms_ni = DE_ms_ni[idx_sim_ni]
DE_ms_ni[DE_ms_ni != 0] = 1
DE_res_mm_ne = rep(0, nrow(res_muscat$table$B$Neuronal_excit))
DE_res_mm_ne[res_muscat$table$B$Neuronal_excit$p_adj.loc <= 0.05] = 1
DE_res_mm_ni = rep(0, nrow(res_muscat$table$B$Neuronal_inhib))
DE_res_mm_ni[res_muscat$table$B$Neuronal_inhib$p_adj.loc <= 0.05] = 1
DE_res_ms_ne = rep(0, nrow(res_sim$table$B$Neuronal_excit))
DE_res_ms_ne[res_sim$table$B$Neuronal_excit$p_adj.loc <= 0.05] = 1
DE_res_ms_ni = rep(0, nrow(res_sim$table$B$Neuronal_inhib))
DE_res_ms_ni[res_sim$table$B$Neuronal_inhib$p_adj.loc <= 0.05] = 1
#Upset true vs predicted
upset_data_mm_ne = data.frame(True = DE_mm_ne, Predicted = DE_res_mm_ne)
upset_data_mm_ni = data.frame(True = DE_mm_ni, Predicted = DE_res_mm_ni)
upset_data_ms_ne = data.frame(True = DE_ms_ne, Predicted = DE_res_ms_ne)
upset_data_ms_ni = data.frame(True = DE_ms_ni, Predicted = DE_res_ms_ni)
#Upset between methods
upset_data_ms_mm_ni = data.frame(Muscat = DE_res_mm_ne, Sim = DE_res_ms_ne)
g1 = upset(upset_data_mm_ne, empty.intersections = TRUE)
g2 = upset(upset_data_mm_ni, empty.intersections = TRUE)
g3 = upset(upset_data_ms_ne, empty.intersections = TRUE)
g4 = upset(upset_data_ms_ni, empty.intersections = TRUE)
g1
g2
g3
g4
nrow(sce_prep)
qplot(c(1:9), c(1:9))
g = qplot(c(1:9), c(1:9))
grid.arrange(g, nrow = 1)
grid.arrange(g1, nrow = 1)
grid.arrange(g,g, nrow = 1)
typeof(g)
typeof(g1)
typeof(grobs = g1)
grid.arrange(grobs = plot_l)
grid.arrange(grobs = g1)
a = grid.arrange(grobs = g1)
a
.libPaths()
remove.packages("muscat")
package.version(muscat)
devtools::install_github("HelenaLC/muscat", ref="dream2")
knitr::opts_chunk$set(echo = TRUE)
#Load data
suppressPackageStartupMessages({
library(SingleCellExperiment)
library(scater)
library(tidyverse)
library(ggplot2)
library(gridExtra)
library(grid)
library(edgeR)
library(irlba)
library(muscat)
library(countsimQC)
library(TMB)
library(cowplot)
library(scDblFinder)
library(dplyr)
library(UpSetR)
library(uwot)
library(Rtsne)
})
#library(sta426)#install_github(adrianom/sta426-project/sta426)
source('./Preprocessing_fun.R', echo=FALSE)
#Load object
sce = readRDS("week13_SCE_clustered.rds")
#sce= prep_steps(sce)
#Load simulation functions
source('./fun.R', echo=FALSE)
sce_prep <- prepSCE(sce,
cluster_id = "cluster_id",
sample_id = "sample_id",
group_id = "group_id",
drop = FALSE)
sce_prep <- prepSim(sce_prep)
counts(sce_prep) = as.matrix(counts(sce_prep))
sce_prep = logNormCounts(sce_prep)
n_cluster = length(unique(colData(sce_prep)$cluster_id))
freq_cluster = table(colData(sce_prep)$cluster_id)
freq_cluster = freq_cluster / sum(freq_cluster)
n_sample = length(unique(colData(sce_prep)$sample_id))
n_group = 2
n_genes = nrow(sce_prep)
n_cells_muscat = 100*n_sample
p_dd = c(0.9, 0, 0.1, 0, 0, 0)
probs = list(cluster = freq_cluster,
sample = rep(1/n_sample, n_sample),
group = rep(1/n_group, n_group))
lfc = 4
n_comp = 10
n_cells = rep(n_cells_muscat / n_sample, n_sample)
kNN = 10
kNN_subsample = 5
verbose = 0
sce_muscat = simData(sce_prep, n_genes = n_genes, n_cells = n_cells_muscat, p_dd = p_dd, probs = probs, lfc = lfc)
meta = metadata(sce_muscat)$gene_info %>% select(cluster_id, logFC, sim_gene)
meta$logFC[is.na(meta$logFC)] = 0
gene_id = meta %>% filter(cluster_id == "Neuronal_excit") %>% select(sim_gene)
idx = sapply(gene_id$sim_gene, function(x){
which(x == rownames(sce_prep))
})
sce_prep2 = sce_prep[idx,]
logFC = list("muscat_data" = meta)
sce_sim = create_dataset(sce_prep2, n_comp, n_cells, kNN, kNN_subsample, n_sample, logFC, probs, verbose)
DESeq_sim = DESeq2::DESeqDataSetFromMatrix(counts(sce_sim), colData(sce_sim), ~cluster_id*group_id)
DESeq_sim = DESeq2::DESeqDataSetFromMatrix(counts(sce_sim), colData(sce_sim), ~cluster_id*group_id)
DESeq_muscat = DESeq2::DESeqDataSetFromMatrix(counts(sce_muscat), colData(sce_muscat), ~cluster_id*group_id)
DESeq_muscat = DESeq2::DESeqDataSetFromMatrix(counts(sce_muscat), colData(sce_muscat), ~cluster_id*group_id)
DESeq_prep = DESeq2::DESeqDataSetFromMatrix(counts(sce_prep), colData(sce_prep), ~cluster_id)
DESeq_sim = DESeq2::DESeqDataSetFromMatrix(counts(sce_sim), colData(sce_sim), ~cluster_id*group_id)
DESeq_muscat = DESeq2::DESeqDataSetFromMatrix(counts(sce_muscat), colData(sce_muscat), ~cluster_id*group_id)
DESeq_prep = DESeq2::DESeqDataSetFromMatrix(counts(sce_prep), colData(sce_prep), ~cluster_id)
QCdata = list("Original" = DESeq_prep, "Muscat" = DESeq_muscat, "Sim" = DESeq_sim)
countsimQCReport(ddsList = QCdata, outputFile = "countsim_report_dream.html",
outputDir = "./CountSimReport_Dream/", outputFormat = "html_document",
showCode = FALSE, forceOverwrite = TRUE,
savePlots = TRUE, description = "This is my test report.",
maxNForCorr = 25, maxNForDisp = Inf,
calculateStatistics = TRUE, subsampleSize = 25,
kfrac = 0.01, kmin = 5,
permutationPvalues = FALSE, nPermutations = NULL)
countsimQCReport(ddsList = QCdata, outputFile = "countsim_report_dream.html",
outputDir = "./CountSimReport_Dream/", outputFormat = "html_document",
showCode = FALSE, forceOverwrite = TRUE,
savePlots = TRUE, description = "This is my test report.",
maxNForCorr = 25, maxNForDisp = Inf,
calculateStatistics = TRUE, subsampleSize = 25,
kfrac = 0.01, kmin = 5,
permutationPvalues = FALSE, nPermutations = NULL)
version(muscat)
version
sessionInfo()
?muscat
?muscat::aggregateData
