library(sta426)
?sta426::compute_dispresion()
?sta426::compute_dispresion
?sta426::compute_dispersion
? sta426::create_dataset
? paste
library(muscat)
library(sta426)
library(sta426)
library(sta426)
data(week13_SCE_clustered.rds)
library(sta426)
readRDS("data/week13_SCE_clustered.rds")
sta426Data = readRDS("data/week13_SCE_clustered.rds")
save(sta426Data, "sta426Data")
save(sta426Data, "data/sta426Data.RData")
save(sta426Data, file = "data/sta426Data.RData")
library(sta426)
data("sta426Data")
devtools::create("mypackage")
devtools::create("sta426")
getwd()
setwd("~/OneDrive - ETHZ/Master/2. Semester/Statistical_Analysis_of_High_Throughput_Genomic_and_Transcriptomic_Data/sta426-project/sta426")
library(sta426)
sessionInfo()
library(sta426)
sessionInfo()
remove.packages("sta426")
install_github("adrianom2017/sta426-project", subdir="sta426")
library(devtools)
install_github("adrianom2017/sta426-project", subdir="sta426")
install_github("adrianom2017/sta426-project", subdir="sta426")
install_github("adrianom2017/sta426-project/sta426")
library(sta426)
install_github("adrianom2017/sta426-project/sta426")
install_github("adrianom2017/sta426-project/sta426")
remove.packages(sta426)
sta426Data
sessionInfo()
library(sta426)
'create_dataset()
))
""
''
'
? create_dataset
library(devtools)
remove.packages(sta426)
remove.packages("sta426")
library(sta426)
library(sta426, ‘/Library/Frameworks/R.framework/Versions/3.1/Resources/library’)
library(sta426, '/Library/Frameworks/R.framework/Versions/3.1/Resources/library')
library(devtools)
install_github("adrianom2017/sta426-project/sta426")
library(sta426)
data("sta426Data")
library(sta426)
?sta426::compute_dispersion()
?sta426::create_dataset
getwd()
library(sta426)
?sta426::create_dataset
library(muscat)
library(sta426)
data("sta426Data")
sce = logNormCounts(sce)
#Extract WT samples
sce_wt = sce[, colData(sce)$group_id == "WT"]
sce_prep <- prepSCE(sce_wt,
cluster_id = "cluster_id",
sample_id = "sample_id",
group_id = "group_id",
drop = FALSE)
sce_prep <- prepSim(sce_prep)
#Set params our simulation
n_comp = 10
n_cells = 100
kNN = 10
kNN_subsample = 5
n_sample = 2
logFC = list(magnitude = 4, proportion = 0.1)
n_group = 2
probs = list(cluster = freq_cluster,
sample = rep(1/n_sample, n_sample),
group = rep(1/n_group, n_group))
verbose = 2
library_size_muscat = 0
#Set params our simulation
n_comp = 10
n_cells = 100
kNN = 10
kNN_subsample = 5
n_sample = 2
logFC = list(magnitude = 4, proportion = 0.1)
n_group = 2
freq_cluster = table(colData(sce_prep)$cluster_id)
freq_cluster = freq_cluster / sum(freq_cluster)
probs = list(cluster = freq_cluster,
sample = rep(1/n_sample, n_sample),
group = rep(1/n_group, n_group))
verbose = 2
library_size_muscat = 0
sce_sim = create_dataset(sce_prep2, n_comp, n_cells, kNN, kNN_subsample, n_sample, logFC, probs, library_size_muscat,verbose)
sce_sim = create_dataset(sce_prep, n_comp, n_cells, kNN, kNN_subsample, n_sample, logFC, probs, library_size_muscat,verbose)
sce_prep
data("sta426Data")
sce = logNormCounts(sce)
#Extract WT samples
sce_wt = sce[, colData(sce)$group_id == "WT"]
sce
sce_wt
colData(sce)
sce_wt = sce[, colData(sce)$group_id == "ctrl"]
sce_wt
sce_prep <- prepSCE(sce_wt,
cluster_id = "cluster_id",
sample_id = "sample_id",
group_id = "group_id",
drop = FALSE)
sce_prep <- prepSim(sce_prep)
#Set params our simulation
n_comp = 10
n_cells = 100
kNN = 10
kNN_subsample = 5
n_sample = 2
logFC = list(magnitude = 4, proportion = 0.1)
n_group = 2
freq_cluster = table(colData(sce_prep)$cluster_id)
freq_cluster = freq_cluster / sum(freq_cluster)
probs = list(cluster = freq_cluster,
sample = rep(1/n_sample, n_sample),
group = rep(1/n_group, n_group))
verbose = 2
library_size_muscat = 0
sce_prep
freq_cluster
sce_sim = create_dataset(sce_prep, n_comp, n_cells, kNN, kNN_subsample, n_sample, logFC, probs, library_size_muscat,verbose)
library(irlba)
sce_sim = create_dataset(sce_prep, n_comp, n_cells, kNN, kNN_subsample, n_sample, logFC, probs, library_size_muscat,verbose)
logcounts(sce_prep)
logcounts(sce_prep) = as.matrix(sce_prep)
logcounts(sce_prep)
logcounts(sce_prep) = as.matrix(logcounts(sce_prep))
sce_sim = create_dataset(sce_prep, n_comp, n_cells, kNN, kNN_subsample, n_sample, logFC, probs, library_size_muscat,verbose)
counts(sce_prep)
counts(sce_prep) = as.matrix(counts(sce_prep))
sce_sim = create_dataset(sce_prep, n_comp, n_cells, kNN, kNN_subsample, n_sample, logFC, probs, library_size_muscat,verbose)
traceback()
library(sta426)
? sta426::create_dataset
library(muscat)
library(sta426)
library(irlba)
data("sta426Data")
sce = logNormCounts(sce)
#Extract WT samples
sce_wt = sce[, colData(sce)$group_id == "ctrl"]
sce_prep <- prepSCE(sce_wt,
cluster_id = "cluster_id",
sample_id = "sample_id",
group_id = "group_id",
drop = FALSE)
sce_prep <- prepSim(sce_prep)
logcounts(sce_prep) = as.matrix(logcounts(sce_prep))
counts(sce_prep) = as.matrix(counts(sce_prep))
#Set params our simulation
n_comp = 10
n_cells = 100
kNN = 10
kNN_subsample = 5
n_sample = 2
logFC = list(magnitude = 4, proportion = 0.1)
n_group = 2
freq_cluster = table(colData(sce_prep)$cluster_id)
freq_cluster = freq_cluster / sum(freq_cluster)
probs = list(cluster = freq_cluster,
sample = rep(1/n_sample, n_sample),
group = rep(1/n_group, n_group))
verbose = 2
library_size_muscat = 0
sce_sim = create_dataset(sce_prep, n_comp, n_cells, kNN, kNN_subsample, n_sample, logFC, probs, library_size_muscat,verbose)
sce_sim
install_github("adrianom2017/sta426-project/sta426")
library(devtools)
install_github("adrianom2017/sta426-project/sta426")
